---
- name: Stop kea related systemd services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
  with_items: "{{ kea_systemd_units }}"
  ignore_errors: true

- name: Create directory for kea sources
  ansible.builtin.file:
    path: "{{ kea_sources_directory }}"
    state: directory
    mode: "0775"

- name: Download and unarchive kea source code tarball
  ansible.builtin.unarchive:
    src: "{{ kea_tarball_url }}"
    dest: "{{ kea_sources_directory }}"
    remote_src: true

- name: Get kea source code working directory, step 1
  ansible.builtin.find:
    paths: "{{ kea_sources_directory }}"
    file_type: file
    patterns: "INSTALL"
    recurse: true
  register: find_results

- name: Get kea source code working directory, step 2
  ansible.builtin.set_fact:
    kea_source_working_dir: "{{ find_results.files[0].path | dirname }}"

- name: Configure kea sources
  ansible.builtin.command:
    argv:
      - "{{ kea_source_working_dir }}/configure"
      - "--prefix={{ kea_installation_directory | quote }}"
    chdir: "{{ kea_source_working_dir }}"
  register: kea_configure_output
  changed_when: kea_configure_output.rc != 0
  failed_when: kea_configure_output.rc != 0

- name: Make
  ansible.builtin.command:
    argv:
      - "/usr/bin/make"
    chdir: "{{ kea_source_working_dir }}"
  register: kea_make_output
  changed_when: kea_make_output.rc != 0
  failed_when: kea_make_output.rc != 0

- name: Make install
  ansible.builtin.command:
    argv:
      - "/usr/bin/make"
      - "install"
    chdir: "{{ kea_source_working_dir }}"
  register: kea_make_install_output
  changed_when: kea_make_install_output.rc != 0
  failed_when: kea_make_install_output.rc != 0

- name: Remove sources directory
  ansible.builtin.file:
    path: "{{ kea_sources_directory }}"
    state: absent

- name: Reboot machine
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible after building samba from sources"
    connect_timeout: 90
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 120
    test_command: uptime
  when: not skip_reboot_after_finish
