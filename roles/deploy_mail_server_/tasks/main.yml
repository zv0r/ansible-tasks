---
- name: Replace localhost IP to actual IP at /etc/hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "^127.*{{ inventory_hostname }}"
    line: "{{ ansible_host }} {{ inventory_hostname }} {{ inventory_hostname_short }} {{ mail_server_fqdn }}"
    owner: root
    group: root
    mode: "0644"

- name: Install packages
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: true
    state: present
  with_items:
    - postfix
    - postfix-pgsql
    - dovecot-imapd
    - dovecot-pgsql
    - dovecot-lmtpd
    - dovecot-sieve
    - dovecot-managesieved
    - rspamd
    - postgresql
    - nginx
    - php-fpm
    - php-apcu
    - php-xml
    - php-gd
    - php-common
    - php-json
    - php-mbstring
    - php-zip
    - php-curl
    - php-fileinfo
    - php-bz2
    - php-intl
    - php-imagick
    - php-bcmath
    - php-gmp
    - python3-psycopg2 # for ansible postgresql module
    - acl # for becoming unprivileged user in ansible postgresql module
  environment:
    DEBIAN_FRONTEND: noninteractive

- name: Remove nginx default website config
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Open ports with ufw
  community.general.ufw:
    rule: allow
    name: WWW Full

- name: Get PHP version
  block:
    - name: Register php command output
      ansible.builtin.command: php -v
      register: php_version_command_output
      failed_when: php_version_command_output.rc != 0
      changed_when: php_version_command_output.rc != 0

    - name: Get PHP version with regexp
      ansible.builtin.set_fact:
        php_version: "{{ php_version_command_output.stdout | regex_search('php ([0-9]+\\.[0-9]+)', '\\1', ignorecase=true) | first }}"

    - name: Get PHP directory
      ansible.builtin.set_fact:
        php_directory: "/etc/php/{{ php_version }}/fpm"

- name: Set memory_limit in php.ini
  ansible.builtin.lineinfile:
    path: "{{ php_directory }}/php.ini"
    regexp: "^memory_limit.*"
    line: "memory_limit = 512M"

- name: Set opcache.enable_cli in php.ini
  ansible.builtin.lineinfile:
    path: "{{ php_directory }}/php.ini"
    regexp: "^;?opcache.enable_cli.*"
    line: "opcache.enable_cli=1"

- name: Set opcache.enable_cli in php.ini
  ansible.builtin.lineinfile:
    path: "{{ php_directory }}/../mods-available/apcu.ini"
    regexp: "^;?apc.enable_cli.*"
    line: "apc.enable_cli=1"

- name: Set postgresql password
  become: true
  become_method: sudo
  become_user: postgres
  community.postgresql.postgresql_user:
    db: postgres
    name: postgres
    password: "{{ postgresql_postgres_user_password }}"

- name: Create mail server database
  community.postgresql.postgresql_db:
    name: "{{ postgresql_mail_server_databse_name }}"
    login_host: "{{ postgresql_host }}"
    login_user: postgres
    login_password: "{{ postgresql_postgres_user_password }}"

- name: Copy prepare_postgres.sql to target machine
  ansible.builtin.template:
    src: postgresql/prepare_postgres.sql.j2
    dest: /tmp/prepare_postgres.sql
    mode: "0644"

- name: Run prepare_postgres.sql script
  community.postgresql.postgresql_script:
    db: "{{ postgresql_mail_server_databse_name }}"
    login_host: "{{ postgresql_host }}"
    login_user: postgres
    login_password: "{{ postgresql_postgres_user_password }}"
    path: /tmp/prepare_postgres.sql

- name: Remove prepare_postgres.sql on target machine
  ansible.builtin.file:
    path: /tmp/prepare_postgres.sql
    state: absent

- name: Add test data to database
  when: not skip_create_test_data
  block:
    - name: Copy test_data.sql to target machine
      ansible.builtin.template:
        src: postgresql/test_data.sql.j2
        dest: /tmp/test_data.sql
        mode: "0644"

    - name: Run test_data.sql script
      community.postgresql.postgresql_script:
        db: "{{ postgresql_mail_server_databse_name }}"
        login_host: "{{ postgresql_host }}"
        login_user: postgres
        login_password: "{{ postgresql_postgres_user_password }}"
        path: /tmp/test_data.sql

    - name: Remove test_data.sql on target machine
      ansible.builtin.file:
        path: /tmp/test_data.sql
        state: absent

- name: Copy postfix configs with postgres settings
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    group: postfix
    mode: "0640"
  with_items:
    - { src: postfix/pgsql-virtual-alias-maps.cf.j2, dest: /etc/postfix/pgsql-virtual-alias-maps.cf }
    - { src: postfix/pgsql-virtual-mailbox-domains.cf.j2, dest: /etc/postfix/pgsql-virtual-mailbox-domains.cf }
    - { src: postfix/pgsql-virtual-mailbox-maps.cf.j2, dest: /etc/postfix/pgsql-virtual-mailbox-maps.cf }

- name: Copy postfix configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: postfix/main.cf.j2, dest: /etc/postfix/main.cf }
    - { src: postfix/master.cf.j2, dest: /etc/postfix/master.cf }
    - { src: postfix/submission_header_cleanup.cf.j2, dest: /etc/postfix/submission_header_cleanup.cf }

- name: Create group for mail storage directories
  ansible.builtin.group:
    name: "{{ mail_storage_group }}"
    state: present
    gid: "{{ mail_storage_gid }}"

- name: Create user for mail storage directories
  ansible.builtin.user:
    name: "{{ mail_storage_user }}"
    uid: "{{ mail_storage_uid }}"
    shell: /usr/sbin/nologin
    home: "{{ mail_storage_user_home }}"
    group: "{{ mail_storage_group }}"

- name: Set ownership for mail storage directory
  ansible.builtin.file:
    state: directory
    owner: "{{ mail_storage_user }}"
    group: "{{ mail_storage_group }}"
    path: "{{ mail_storage_user_home }}"
    mode: "0700"
    recurse: true

- name: Create rspamd dkim directory
  ansible.builtin.file:
    state: directory
    path: "{{ dkim_directory }}"
    owner: "{{ rspamd_user }}"
    group: "{{ rspamd_group }}"
    mode: "0770"

- name: Copy rspamd configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: rspamd/milter_headers.conf.j2, dest: /etc/rspamd/override.d/milter_headers.conf }
    - { src: rspamd/dkim_signing.conf.j2, dest: /etc/rspamd/local.d/dkim_signing.conf }

- name: Generate DKIM
  ansible.builtin.command: "rspamadm dkim_keygen \
    -b 2048 \
    -d {{ mail_domain }} \
    -s {{ dkim_identifier }} \
    -k {{ dkim_key_file | ansible.builtin.quote }}"
  changed_when: true
  failed_when: false
  register: dkim_pubkey
  notify: Process DKIM key
  when: skip_dkim_gen is not defined

- name: Flush handlers to process DKIM key immediately
  ansible.builtin.meta: flush_handlers

- name: Set ssl config for dovecot
  ansible.builtin.lineinfile:
    path: /etc/dovecot/conf.d/10-ssl.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^ssl =.*", line: "ssl = required" }
    - { regexp: "^.*ssl_min_protocol =.*", line: "ssl_min_protocol = TLSv1.2" }

- name: Create link to certificate and key for dovecot
  ansible.builtin.file:
    state: link
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "{{ cert_fullchain_file }}", dest: /etc/dovecot/private/dovecot.pem }
    - { src: "{{ cert_key_file }}", dest: /etc/dovecot/private/dovecot.key }

- name: Set auth config for dovecot
  ansible.builtin.lineinfile:
    path: /etc/dovecot/conf.d/10-auth.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^.*auth-system.conf.ext", line: "#!include auth-system.conf.ext" }
    - { regexp: "^.*auth-sql.conf.ext", line: "!include auth-sql.conf.ext" }

- name: Copy dovecot-sql.conf.ext config
  ansible.builtin.template:
    src: dovecot/dovecot-sql.conf.ext.j2
    dest: /etc/dovecot/dovecot-sql.conf.ext
    mode: "0640"

- name: Copy dovecot configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: dovecot/10-mail.conf.j2, dest: /etc/dovecot/conf.d/10-mail.conf }
    - { src: dovecot/15-mailboxes.conf.j2, dest: /etc/dovecot/conf.d/15-mailboxes.conf }

- name: Finish
  ansible.builtin.debug:
    msg:
      - "Job finished."
      - "Don't forget to create TXT record {{ dkim_identifier }}._domainkey.{{ mail_domain }}"
      - "with value from the file {{ dkim_pubkey_file }}"
