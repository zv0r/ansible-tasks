---
- name: Install php and dependencies
  ansible.builtin.apt:
    state: present
    name: "{{ item }}"
    update_cache: true
  with_items:
    - libmagickcore-6.q16-6-extra
    - php
    - php-common
    - php-fpm
    - php-bcmath
    - php-bz2
    - php-curl
    - php-fileinfo
    - php-gd
    - php-gmp
    - php-imagick
    - php-intl
    - php-json
    - php-mbstring
    - php-pgsql
    - php-redis
    - php-xml
    - php-zip
  environment:
    DEBIAN_FRONTEND: noninteractive

# - name: Disable apache2 if installed
#   ansible.builtin.systemd:
#     service: apache2.service
#     state: stopped
#     enabled: false
#     masked: true
#   ignore_errors: true

# - name: Set PostgreSQL for nextcloud
#   become: true
#   become_method: sudo
#   become_user: postgres
#   block:
#     - name: Create nextcloud database
#       community.postgresql.postgresql_db:
#         name: "{{ postgresql.nextcloud_database }}"

#     - name: Run SQL scripts
#       ansible.builtin.include_tasks: run_sql_scripts.yml
#       with_items:
#         - { db: "{{ postgresql.nextcloud_database }}", src: postgresql/prepare_nextcloud.sql.j2, dest: /tmp/prepare_nextcloud.sql }

# - name: Get PHP params
#   block:
#     - name: Register php command output
#       ansible.builtin.command: php -v
#       register: php_version_command_output
#       failed_when: php_version_command_output.rc != 0
#       changed_when: true

#     - name: Get PHP version with regexp
#       ansible.builtin.set_fact:
#         php_version: "{{ php_version_command_output.stdout | regex_search('php ([0-9]+\\.[0-9]+)', '\\1', ignorecase=true) | first }}"

#     - name: Get PHP directory
#       ansible.builtin.set_fact:
#         php_directory: "/etc/php/{{ php_version }}/fpm"

# - name: Set php pool.d/www.conf config
#   ansible.builtin.lineinfile:
#     path: "{{ php_directory }}/pool.d/www.conf"
#     regexp: "^;env[PATH].*"
#     line: "env[PATH] = /usr/local/bin:/usr/bin:/bin"
#   notify: Restart PHP-FPM

# - name: Set php.ini config
#   ansible.builtin.lineinfile:
#     path: "{{ php_directory }}/php.ini"
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     - { regexp: "^memory_limit.*", line: "memory_limit = 512M" }
#     - { regexp: "^;?opcache.enable_cli.*", line: "opcache.enable_cli=1" }
#     - { regexp: "^;?opcache.interned_strings_buffer.*", line: "opcache.interned_strings_buffer=32" }
#     - { regexp: "^;?opcache.revalidate_freq.*", line: "opcache.revalidate_freq=1" }
#   notify: Restart PHP-FPM

# - name: Unarchive nextcloud sources
#   ansible.builtin.unarchive:
#     src: https://download.nextcloud.com/server/releases/latest.tar.bz2
#     dest: "/var/www"
#     remote_src: true
#     owner: www-data
#     group: www-data
#   when: skip_nextcloud_download is not defined

# - name: Setup reverse proxy nginx nextcloud host configs
#   ansible.builtin.include_role:
#     name: setup_nginx_reverse_proxy
#   vars:
#     template_file_name: nginx/nextcloud.conf.j2
#     nginx_server_config_file_name: "{{ nextcloud.server_fqdn }}.conf"
#     nginx_server_listen_port: 443
#     skip_deploy_certs: true

# - name: Install Nextcloud
#   when: nextcloud_install is defined and skip_nextcloud_download is not defined
#   become: true
#   become_method: sudo
#   become_user: www-data
#   block:
#     - name: Run installation command
#       ansible.builtin.command: "php occ maintenance:install \
#         --database {{ 'pgsql' | quote }} \
#         --database-host {{ postgresql.host | quote }} \
#         --database-name {{ postgresql.nextcloud_database | quote }} \
#         --database-user {{ postgresql.nextcloud_user_name | quote }} \
#         --database-pass {{ postgresql.nextcloud_user_pass | quote }} \
#         --admin-user {{ nextcloud.admin_user | quote }} \
#         --admin-pass {{ nextcloud.admin_pass | quote }} \
#         --data-dir {{ nextcloud.data_dir | quote }}"
#       args:
#         chdir: /var/www/nextcloud
#       register: nextcloud_result
#       failed_when: nextcloud_result.rc != 0
#       changed_when: true

#     - name: Fixing DB bugs
#       ansible.builtin.command: "php occ {{ item }}"
#       args:
#         chdir: /var/www/nextcloud
#       register: res
#       failed_when: res.rc != 0
#       changed_when: true
#       with_items:
#         - "db:convert-filecache-bigint"
#         - "db:add-missing-indices"

#     - name: Print Nextcloud installation results
#       ansible.builtin.debug:
#         msg: "{{ nextcloud_result }}"

# - name: Upgrade Nextcloud
#   when: nextcloud_install is not defined and skip_nextcloud_download is not defined
#   become: true
#   become_method: sudo
#   become_user: www-data
#   block:
#     - name: Run upgrade command
#       ansible.builtin.command: "php occ upgrade"
#       args:
#         chdir: /var/www/nextcloud
#       register: nextcloud_result
#       failed_when: nextcloud_result.rc != 0
#       changed_when: true

#     - name: Print Nextcloud upgrade results
#       ansible.builtin.debug:
#         msg: "{{ nextcloud_result }}"

- name: Set configs
  become: true
  become_method: sudo
  become_user: www-data
  ansible.builtin.command: "php occ config:system:set {{ item }}"
  args:
    chdir: /var/www/nextcloud
  register: res
  failed_when: res.rc != 0
  changed_when: true
  with_items:
    - "trusted_domains 1 --value={{ nextcloud.server_fqdn | quote }}"
    - "logtimezone --value={{ nextcloud.logtimezone | quote }}"
    - "default_phone_region --value={{ nextcloud.default_phone_region | quote }}"
    - "memcache.local --value={{ '\\OC\\Memcache\\Redis' | quote }}"
    - "memcache.distributed --value={{ '\\OC\\Memcache\\Redis' | quote }}"
    - "memcache.locking --value={{ '\\OC\\Memcache\\Redis' | quote }}"
    - "mail_smtpmode --value={{ 'sendmail' | quote }}"
    - "mail_from_address --value={{ 'no-reply' | quote }}"
    - "mail_domain --value={{ mail_domains[0].name | quote }}"
    - "redis host --value={{ '127.0.0.1' | quote }}"
    - "redis port --value={{ '6379' | quote }}"
    - "user_backend_sql_raw db_name --value={{ postgresql.mail_server_database | quote }}"
    - "user_backend_sql_raw db_user --value={{ postgresql.nextcloud_user_name | quote }}"
    - "user_backend_sql_raw db_user --value={{ postgresql.nextcloud_user_name | quote }}"
    - "user_backend_sql_raw db_password --value={{ postgresql.nextcloud_user_pass | quote }}"
    - "user_backend_sql_raw hash_algorithm_for_new_passwords --value={{ 'argon2id' | quote }}"
    - >-
      user_backend_sql_raw queries get_password_hash_for_user --value="SELECT password_hash FROM users_fqda WHERE fqda = :username"
    - >-
      user_backend_sql_raw queries user_exists --value="SELECT EXISTS(SELECT 1 FROM users_fqda WHERE fqda = :username)"
    - >-
      user_backend_sql_raw queries get_users --value='SELECT fqda FROM users_fqda WHERE (fqda ILIKE :search) OR (display_name ILIKE :search)'
    - >-
      user_backend_sql_raw queries set_password_hash_for_user
      --value="UPDATE users SET password_hash = :new_password_hash WHERE local = split_part(:username, '@', 1) AND domain = split_part(:username, '@', 2)"
    - >-
      user_backend_sql_raw queries delete_user
      --value="DELETE FROM users WHERE local = split_part(:username, '@', 1) AND domain = split_part(:username, '@', 2)"
    - >-
      user_backend_sql_raw queries get_display_name
      --value="SELECT display_name FROM users WHERE local = split_part(:username, '@', 1) AND domain = split_part(:username, '@', 2)"
    - >-
      user_backend_sql_raw queries set_display_name
      --value="UPDATE users SET display_name = :new_display_name WHERE local = split_part(:username, '@', 1) AND domain = split_part(:username, '@', 2)"
    - >-
      user_backend_sql_raw queries count_users
      --value="SELECT COUNT (*) FROM users"
    - >-
      user_backend_sql_raw queries create_user
      --value="INSERT INTO users (local, domain, password_hash) VALUES (split_part(:username, '@', 1), split_part(:username, '@', 2), :password_hash)"

- name: Prepare Nextcloud cron timer
  ansible.builtin.template:
    src: "nextcloud/nextcloud-cron.{{ item }}.j2"
    dest: "/etc/systemd/system/nextcloud-cron.{{ item }}"
    owner: root
    group: root
    mode: "0644"
  with_items:
    - service
    - timer

- name: Enable Nextcloud cron timer
  ansible.builtin.systemd:
    name: "nextcloud-cron.{{ item }}"
    state: started
    masked: false
    enabled: true
    daemon_reload: true
  with_items:
    - service
    - timer
