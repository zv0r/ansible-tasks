---
- name: Install php and dependencies
  ansible.builtin.apt:
    state: present
    name: "{{ item }}"
    update_cache: true
  with_items:
    - php
    - php-common
    - php-fpm
    - php-bcmath
    - php-bz2
    - php-curl
    - php-fileinfo
    - php-gd
    - php-gmp
    - php-imagick
    - php-intl
    - php-json
    - php-mbstring
    - php-pgsql
    - php-redis
    - php-xml
    - php-zip
  environment:
    DEBIAN_FRONTEND: noninteractive

- name: Disable apache2 if installed
  ansible.builtin.systemd:
    service: apache2.service
    state: stopped
    enabled: false
    masked: true
  ignore_errors: true

- name: Set PostgreSQL for nextcloud
  become: true
  become_method: sudo
  become_user: postgres
  block:
    - name: Create nextcloud database
      community.postgresql.postgresql_db:
        name: "{{ postgresql.nextcloud_database }}"

    - name: Run SQL scripts
      ansible.builtin.include_tasks: run_sql_scripts.yml
      with_items:
        - { db: "{{ postgresql.nextcloud_database }}", src: postgresql/prepare_nextcloud.sql.j2, dest: /tmp/prepare_nextcloud.sql }

- name: Get PHP params
  block:
    - name: Register php command output
      ansible.builtin.command: php -v
      register: php_version_command_output
      failed_when: php_version_command_output.rc != 0
      changed_when: true

    - name: Get PHP version with regexp
      ansible.builtin.set_fact:
        php_version: "{{ php_version_command_output.stdout | regex_search('php ([0-9]+\\.[0-9]+)', '\\1', ignorecase=true) | first }}"

    - name: Get PHP directory
      ansible.builtin.set_fact:
        php_directory: "/etc/php/{{ php_version }}/fpm"

- name: Set php pool.d/www.conf config
  ansible.builtin.lineinfile:
    path: "{{ php_directory }}/pool.d/www.conf"
    regexp: "^;env[PATH].*"
    line: "env[PATH] = /usr/local/bin:/usr/bin:/bin"
  notify: Restart PHP-FPM

- name: Set php.ini config
  ansible.builtin.lineinfile:
    path: "{{ php_directory }}/php.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^memory_limit.*", line: "memory_limit = 512M" }
    - { regexp: "^;?opcache.enable_cli.*", line: "opcache.enable_cli=1" }
    - { regexp: "^;?opcache.interned_strings_buffer.*", line: "opcache.interned_strings_buffer=32" }
    - { regexp: "^;?opcache.revalidate_freq.*", line: "opcache.revalidate_freq=1" }
  notify: Restart PHP-FPM

- name: Unarchive nextcloud sources
  ansible.builtin.unarchive:
    src: https://download.nextcloud.com/server/releases/latest.tar.bz2
    dest: "/var/www"
    remote_src: true
    owner: www-data
    group: www-data

- name: Setup reverse proxy nginx nextcloud host configs
  ansible.builtin.include_role:
    name: setup_nginx_reverse_proxy
  vars:
    template_file_name: nginx/nextcloud.conf.j2
    nginx_server_config_file_name: "{{ nextcloud.server_fqdn }}.conf"
    nginx_server_listen_port: 443
    skip_deploy_certs: true

- name: Install Nextcloud
  when: nextcloud_install is defined
  become: true
  become_method: sudo
  become_user: www-data
  block:
    - name: Run installation command
      ansible.builtin.command: "php occ maintenance:install \
        --database {{ 'pgsql' | quote }} \
        --database-host {{ postgresql.host | quote }} \
        --database-name {{ postgresql.nextcloud_database | quote }} \
        --database-user {{ postgresql.nextcloud_user_name | quote }} \
        --database-pass {{ postgresql.nextcloud_user_pass | quote }} \
        --admin-user {{ nextcloud.admin_user | quote }} \
        --admin-pass {{ nextcloud.admin_pass | quote }} \
        --data-dir {{ nextcloud.data_dir | quote }}"
      args:
        chdir: /var/www/nextcloud
      register: nextcloud_install
      failed_when: nextcloud_install.rc != 0
      changed_when: true

    - name: Print Nextcloud installation results
      ansible.builtin.debug:
        msg: "{{ nextcloud_install }}"

# - name: Upgrade Nextcloud
#   when: nextcloud_install is not defined
